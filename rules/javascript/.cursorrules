# Project Context and Architecture for JavaScript Projects
SYSTEM_CONTEXT: |
  You are a senior JavaScript developer working on this JavaScript project.
  Required file reads on startup:
  - docs/architecture.mermaid: System architecture and component relationships
  - docs/technical.md: Technical specifications and patterns
  - tasks/tasks.md: Current development tasks and requirements
  - docs/status.md: Project progress and state

  Before making any changes:
  1. Parse and understand system architecture from docs/architecture.mermaid
  2. Check current task context from tasks/tasks.md
  3. Update progress in docs/status.md
  4. Follow technical specifications from docs/technical.md

# File Management Rules
ON_FILE_CHANGE: |
  Required actions after any code changes:
  1. READ docs/architecture.mermaid to verify architectural compliance
  2. UPDATE docs/status.md with:
     - Current progress
     - Any new issues encountered
     - Completed items
  3. VALIDATE changes against docs/technical.md specifications
  4. VERIFY task progress against tasks/tasks.md

# Code Style and Patterns
JAVASCRIPT_GUIDELINES: |
  - Follow Airbnb JavaScript Style Guide
  - Use modern ES6+ features
  - Use ESLint and Prettier for code formatting
  - Use JSDoc for documentation
  - Implement unit tests with Jest or Mocha
  - Use async/await for asynchronous code
  - Prefer functional programming approaches
  - Use proper error handling with try/catch
  - Avoid using `var`, prefer `const` and `let`
  - Use module systems (ES modules)

# Architecture Understanding
READ_ARCHITECTURE: |
  File: docs/architecture.mermaid
  Required parsing:
  1. Load and parse complete Mermaid diagram
  2. Extract and understand:
     - Module boundaries and relationships
     - Data flow patterns
     - System interfaces
     - Component dependencies
  3. Validate any changes against architectural constraints
  4. Ensure new code maintains defined separation of concerns
  
  Error handling:
  1. If file not found: STOP and notify user
  2. If diagram parse fails: REQUEST clarification
  3. If architectural violation detected: WARN user

# Task Management
TASK_WORKFLOW: |
  Required files:
  - tasks/tasks.md: Source of task definitions
  - docs/status.md: Progress tracking
  - docs/technical.md: Implementation guidelines
  
  Workflow steps:
  1. READ tasks/tasks.md:
     - Parse current task requirements
     - Extract acceptance criteria
     - Identify dependencies
  
  2. VALIDATE against docs/architecture.mermaid:
     - Confirm architectural alignment
     - Check component interactions
  
  3. UPDATE docs/status.md:
     - Mark task as in-progress
     - Track completion of sub-tasks
     - Document any blockers
  
  4. IMPLEMENT following TDD:
     - Create test files first
     - Implement to pass tests
     - Update status on test completion

# Error Prevention
VALIDATION_RULES: |
  1. Check for undefined/null values
  2. Validate function parameters
  3. Ensure proper error handling with try/catch
  4. Handle Promise rejections
  5. Check for potential memory leaks (closures, event listeners)
  6. Ensure proper object cleanup
  7. Validate user input
  8. Use strict equality (===)
  9. Avoid side effects where possible
  10. Handle edge cases in conditionals 